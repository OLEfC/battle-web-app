"""
Django settings for battle_dashboard project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import environ
from datetime import timedelta

# Ініціалізація environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    MQTT_PORT=(int, 8883)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env_path = os.path.join(BASE_DIR.parent, '.env')
print(f"Looking for .env file at: {env_path}")
print(f"File exists: {os.path.exists(env_path)}")

if os.path.exists(env_path):
    with open(env_path, 'r') as f:
        print("Contents of .env file:")
        print(f.read())

environ.Env.read_env(env_path, overwrite=True)



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'axes',  # Django Axes for brute force protection
    'corsheaders',  # CORS headers for API
    'api',
    'mqtt_client',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware (повинен бути перед CommonMiddleware)
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.security.SecurityMiddleware',
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'battle_dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'battle_dashboard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': env('DB_NAME', default='battle_dashboard'),
        'USER': env('DB_USER', default='root'),
        'PASSWORD': env('DB_PASSWORD', default=''),
        'HOST': env('DB_HOST', default='localhost'),
        'PORT': env('DB_PORT', default='3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'use_unicode': True,
            'init_command': "SET time_zone = '+00:00'",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'uk'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# MQTT settings
MQTT_BROKER = env('MQTT_BROKER', default='mqtt.local')
MQTT_PORT = env.int('MQTT_PORT', default=8883)
MQTT_USERNAME = env('MQTT_USERNAME', default='')
MQTT_PASSWORD = env('MQTT_PASSWORD', default='')

print(f"MQTT settings from .env:")
print(f"MQTT_BROKER: {MQTT_BROKER}")
print(f"MQTT_PORT: {MQTT_PORT}")
print(f"MQTT_USERNAME: {MQTT_USERNAME}")
print(f"MQTT_PASSWORD: {MQTT_PASSWORD}")

# MQTT TLS/SSL settings
CERT_DIR = os.path.join(BASE_DIR, 'certs', 'mqtt.local')
MQTT_CA_CERT = env('MQTT_CA_CERT', default='certs/mqtt.local/fullchain.pem')
MQTT_CLIENT_CERT = env('MQTT_CLIENT_CERT', default='certs/mqtt.local/server.crt')
MQTT_CLIENT_KEY = env('MQTT_CLIENT_KEY', default='certs/mqtt.local/server.key')

print(f"MQTT TLS settings from .env:")
print(f"MQTT_CA_CERT: {MQTT_CA_CERT}")
print(f"MQTT_CLIENT_CERT: {MQTT_CLIENT_CERT}")
print(f"MQTT_CLIENT_KEY: {MQTT_CLIENT_KEY}")

# REST Framework налаштування без JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# Session Security Settings
SESSION_COOKIE_AGE = 3600  # 1 година
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(timestamp)s %(ip)s %(user)s %(method)s %(path)s %(message)s'
        },
    },
    'handlers': {
        'security_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/security.log',
            'formatter': 'json',
        },
    },
    'loggers': {
        'security': {
            'handlers': ['security_file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Django Axes Configuration (захист від брутфорс атак)
AXES_FAILURE_LIMIT = 5  # кількість спроб до блокування
AXES_LOCK_OUT_AT_FAILURE = True
AXES_COOLOFF_TIME = 1  # час блокування в годинах

# Додано новий бекенд для аутентифікації
AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend повинен бути першим у списку
    'axes.backends.AxesStandaloneBackend',
    # Django ModelBackend є стандартним бекендом
    'django.contrib.auth.backends.ModelBackend',
]

# CORS налаштування
CORS_ALLOW_ALL_ORIGINS = False  # Безпечніше, ніж дозволяти всі домени
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React frontend
    "http://127.0.0.1:3000",
]
CORS_ALLOW_CREDENTIALS = True  # Дозволяємо передавати куки та заголовки автентифікації
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
CSRF_COOKIE_SAMESITE = 'Lax'  # None, Lax, or Strict
CSRF_COOKIE_HTTPONLY = False  # False allows JavaScript to access the cookie
CSRF_USE_SESSIONS = False  # Store CSRF token in the session instead of a cookie
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
